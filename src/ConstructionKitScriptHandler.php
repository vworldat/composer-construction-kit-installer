<?php

namespace C33s\ConstructionKit;

use Composer\Composer;
use Composer\IO\IOInterface;
use Composer\Script\CommandEvent;
use Symfony\Component\ClassLoader\ClassCollectionLoader;
use Symfony\Component\Process\PhpExecutableFinder;
use Symfony\Component\Process\Process;
use Composer\Package\Dumper\ArrayDumper;
use Sensio\Bundle\DistributionBundle\Composer\ScriptHandler;
use Sensio\Bundle\GeneratorBundle\Manipulator\KernelManipulator;
use Symfony\Component\Yaml\Yaml;

class ConstructionKitScriptHandler extends ScriptHandler
{
    /**
     * Composer variables are declared static so that an event could update
     * a composer.json and set new options, making them immediately available
     * to forthcoming listeners.
     */
    private static $options = array(
        'symfony-app-dir' => 'app',
        'symfony-web-dir' => 'web',
        'symfony-assets-install' => 'hard',
        'symfony-cache-warmup' => false,
        'c33s-construction-kit-auto-install' => true,
    );

    /**
     * Performs building blocks scan and config update
     *
     * @param $event CommandEvent A instance
     */
    public static function postAutoloadDump(CommandEvent $event)
    {
        $options = self::getOptions($event);
        $appDir = $options['symfony-app-dir'];
        $io = $event->getIO();

        if (!is_dir($appDir))
        {
            $io->write('<error>The symfony-app-dir ('.$appDir.') specified in composer.json was not found in '.getcwd().', can not build building blocks file.</error>'.PHP_EOL);

            return;
        }
        $composer = $event->getComposer();

        static::updateBuildingBlocksList($composer, $io, $appDir);
        static::addConstructionKitBundleToKernel($appDir);
        static::executeValidateBlocksList($event);
    }

    protected static function updateBuildingBlocksList(Composer $composer, IOInterface $io, $appDir)
    {
        $io->write('<info>Retrieving building blocks for C33sConstructionBlockBundle</info>');

        $packages = static::getPackages($composer);
        $blocks = array();
        foreach ($packages as $package)
        {
            foreach ($package['extra']['c33s-building-blocks'] as $block)
            {
                $blocks[] = $block;
            }
        }

        $content = "# This file is auto-generated by c33s/composer-construction-kit-installer\n# upon each composer dump-autoload event\n";
        $content .= Yaml::dump(array(
            'c33s_construction_kit' => array(
                'found_building_blocks' => $blocks,
            ),
        ), 3);

        file_put_contents($appDir.'/config/config/c33s_construction_kit.generated.yml', $content);
    }

    /**
     * Check if the AppKernel already includes C33sConstructionKitBundle by booting it and checking for the bundle.
     * If the bundle was not registered yet, add it using the KernelManipulator.
     *
     * @param string $appDir
     */
    protected static function addConstructionKitBundleToKernel($appDir)
    {
        require_once($appDir.'/AppKernel.php');

        $kernel = new \AppKernel('prod', false);
        try
        {
            $manipulator = new KernelManipulator($kernel);
            $manipulator->addBundle('C33s\\ConstructionKitBundle\\C33sConstructionKitBundle');
        }
        catch (\RuntimeException $e)
        {
        }
    }

    protected static function executeValidateBlocksList(CommandEvent $event)
    {
        $options = self::getOptions($event);
        $consoleDir = self::getConsoleDir($event, 'validate the building blocks list');

        if (null === $consoleDir)
        {
            return;
        }

//         $noInstall = '';
//         if (!$options['c33s-construction-kit-auto-install']) {
//             $noInstall = ' --no-install';
//         }

        static::executeCommand($event, $consoleDir, 'c33s:construction-kit:refresh', $options['process-timeout']);
    }

    /**
     * Get active non-dev packages from the given Composer's locker that include c33s-building-blocks extra array.
     *
     * @param Composer $composer
     */
    protected static function getPackages(Composer $composer)
    {
        $locker = $composer->getLocker();
        if (isset($locker)) {
            $lockData = $locker->getLockData();
            $allPackages = isset($lockData['packages']) ? $lockData['packages'] : array();
        }

        $packages = array();
        // Only add those packages that we can reasonably
        // assume are components into our packages list
        foreach ($allPackages as $package) {
            $extra = isset($package['extra']) ? $package['extra'] : array();
            if (isset($extra['c33s-building-blocks']) && is_array($extra['c33s-building-blocks']))
            {
                $packages[] = $package;
            }
        }

        // Add the root package to the packages list.
        $root = $composer->getPackage();
        if ($root) {
            $dumper = new ArrayDumper();
            $package = $dumper->dump($root);
            $package['is-root'] = true;

            if (isset($package['extra']['c33s-building-blocks']) && is_array($package['extra']['c33s-building-blocks']))
            {
                $packages[] = $package;
            }
        }

        return $packages;
    }

    protected static function getOptions(CommandEvent $event)
    {
        $options = array_merge(self::$options, $event->getComposer()->getPackage()->getExtra());

        $options['symfony-assets-install'] = getenv('SYMFONY_ASSETS_INSTALL') ?: $options['symfony-assets-install'];

        $options['process-timeout'] = $event->getComposer()->getConfig()->get('process-timeout');

        return $options;
    }
}
